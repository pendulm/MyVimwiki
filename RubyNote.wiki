= Ruby Programming Language =

%toc

== Chapter 1 Preface ==
=== displaying output ===
puts :: newline and to_s
print :: no newline and to_s
p :: newline and inspect

to_s => `__str__` in python

inspect => `__repr__` in python

=== viewing ruby documentation with ri ===
. :: common
`#` :: instance method
`::` :: class method

----

== Chapter 2 Strucrure and Execution ==
an identifiers begin with a upper case letter is a constant,
modify it cause warning(but not error)

=== specifying program encoding ===
ruby 1.8
`-Ku` :: utf-8
`-ke` :: euc-jp
`-Ks` :: sjis

`__ENCODING__` is a Encoding object, represent current running source encoding

=== default external encoding ===
-K set the default external encoding and use it as source encoding

Encoding.default_external => a Encoding object
Encoding.locale_charmap => a string object(base timezone, igone option in command line)

----

== Chapter 3 Datatypes and Objects ==

=== string literals ===
`''` only support `\' \\` no interpolation, multiline
`""` support all escape and interpolation, multiline, escape newline(`\n`)
`%q` same `''`
`%Q` same `""`

=== acssessing characters and substring ===

* `s[0]`
* `s[0, 2]`
* `s[2..3]`
* `s[0...2]`
* `s["l"]`
* `s[/[aeiou]/]`

=== iterating string ===
ruby 1.9

string dont inlcude Enumerable

* each_char
* each_byte
* each_line

=== mulyibyte ===

length :: num of char
size :: num of char
bytesize :: num of byte

=== arrays ===

%w[this is a test] :: ['this', 'is', 'a', 'test']
%W(\s \t \r \n) :: ["\s", "\t", "\r", "\n"]


=== ranges ===

continuous :: <=> (compare with endpoints)

discrete :: ==, succ (compare with return value of succ)

ruby 1.9

include? :: continuous when numueric otherwise discrete
member? :: same with include
cover? :: always continuous

=== symbols ===

%s["]

{{{
i = 1
loop do
  str = i.to_s
  s = str.to_sym
  i += 1
end
}}}

result: symbol table overflow

symbols can't be garbage collect

=== object class and object type ===

o.instance_of? :: direct instance
o.is_a? :: can be indirect instance

=== object equality ===

equal? :: defined in Object, compare by object_id
`==` :: defined in Object, same as equal? Class can use it for a resonable equality
eql? :: defined in Object, same as equal? compare for key

dont override equal?, and == for common compare, eql? for hash key compare and no cast type for compare

`===` :: defined in Object, same as `==`

Range, Regexp, Class, Symbol overide `===`

=== object conversion ===

method Array, Float, Integer, String defined in Kernel module

*question?*

=== copying object ===

clone :: frozebm tainted
dup :: tainted

----

== Chapter 4 Expressions and Operators ==

=== keyword literals ===

* nil(!NilClass)
* true(!TrueClass)
* false(!FalseClass)
* self
* `__FILE__`
* `__LINE__`
* `_ENCODING__`

=== uninitialized variables ===

class variables :: !NameError
instance variables :: nil
global variables :: nil
local variables :: !NameError if have not seeing a assignment

variables is exist when ruby seen assignment, whether have passed value truly or not

=== constant references ===
`::` :: method and constant reference
`.` :: only method reference
`::ARGV` :: `Object::ARGV`

*question?*

_constants can only defined in modules and classed?_

answer

yes, p94

-----

== Chapter 5 Statements and Control Structures ==


=== return value ===

if :: last statement or nil
unless :: last statement or nil
case :: last statement or nil

while :: nil
until :: nil
for :: *collection*

== Chapter 6 Methods, Procs, Lambdas, and Closures ==
=== block arguments ===

==== case 1 ====
{{{
def m(...)
    ...
    yield
end

m(...) {}
}}}


==== case 2 ====
{{{
def m(..., &p)
    ...
    p.call # also yield
end

m(...) {}
}}}

==== case 3 ====
{{{
p = proc.new {}
def m(..., p)
    ...
    p.call # no yield
end

m(..., p)
}}}

==== case 4 ====
{{{
p = proc.new {}
def m(..., &p)
    ...
    p.call # also yield
end

m(..., &p) # p can be any object responced to to_proc, like Proc, Method, Synmbol
}}}
=== method object ===
name :: method name
owner :: defined in which class
receiver :: binding object

